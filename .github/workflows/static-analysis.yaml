name: Static Analysis Pipeline

on:
  push:
    branches-ignore:
      - dev

permissions:
  contents: write
  security-events: write  # Ensure the action can upload SARIF results

jobs:
  # Secret scanning job
  secret-scan:
    name: "Secret Scan"
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Code
        uses: actions/checkout@v4

      - name: Install git-secrets
        run: |
          git clone https://github.com/awslabs/git-secrets.git
          cd git-secrets && sudo make install

      - name: Scan for Secrets
        run: git secrets --scan --recursive

      - name: Run TruffleHog to detect sensitive information
        run: |
          pip install truffleHog
          trufflehog --regex --entropy=True .

      - name: Upload Results as an Artifact
        uses: actions/upload-artifact@v3
        with:
          name: secret-scan-results
          path: secret-scan-results.txt

  tflint:
    runs-on: ubuntu-latest
    permissions: write-all

    steps:
      - name: Checkout source code
        uses: actions/checkout@v4

      - name: Get Changed Terraform Files
        id: changes
        run: |
          git diff --name-only ${{ github.sha }}^1 ${{ github.sha }} | grep '\.tf$' > changed_files.txt || echo "No .tf files changed"

      - name: Check if any Terraform files were changed
        id: check_files
        run: |
          if [ -s changed_files.txt ]; then
            echo "Files changed"
          else
            echo "No .tf files changed"
            exit 0
          fi

      - name: Initialize TFLint
        run: tflint --init

      - name: Run TFLint on Changed Files
        run: |
          while IFS= read -r file; do
            tflint -f sarif --chdir=infra/ --recursive --config=${file} >> tflint.sarif
          done < changed_files.txt
        continue-on-error: true

      - name: Upload SARIF file
        uses: github/codeql-action/upload-sarif@v3
        with:
          sarif_file: tflint.sarif
          category: tflint

      - name: Upload TFLint SARIF as an artifact
        uses: actions/upload-artifact@v3
        with:
          name: tflint-sarif
          path: tflint.sarif

  checkov:
    name: 'CHECKOV'
    runs-on: ubuntu-latest
    needs: tflint

    steps:
      - name: Checkout Code
        uses: actions/checkout@v3

      - name: Get Changed Terraform Files
        id: changes
        run: |
          git diff --name-only ${{ github.sha }}^1 ${{ github.sha }} | grep '\.tf$' > changed_files.txt || echo "No .tf files changed"

      - name: Check if any Terraform files were changed
        id: check_files
        run: |
          if [ -s changed_files.txt ]; then
            echo "Files changed"
          else
            echo "No .tf files changed"
            exit 0
          fi

      - name: Run Checkov on Changed Files
        run: |
          while IFS= read -r file; do
            checkov -d infra/ -o sarif --config-file aws/CKV_LIST.yaml >> prisma_policies.sarif
          done < changed_files.txt
        continue-on-error: true

      - name: Upload Checkov SARIF Reports
        uses: github/codeql-action/upload-sarif@v3
        with:
          sarif_file: prisma_policies.sarif
          category: checkov-analysis-1

      - name: Upload Checkov SARIF as an artifact
        uses: actions/upload-artifact@v3
        with:
          name: prisma_policies-sarif
          path: prisma_policies.sarif

  tfsec:
    name: TFSEC
    runs-on: ubuntu-latest
    needs: tflint

    steps:
      - name: Checkout Code
        uses: actions/checkout@v3

      - name: Get Changed Terraform Files
        id: changes
        run: |
          git diff --name-only ${{ github.sha }}^1 ${{ github.sha }} | grep '\.tf$' > changed_files.txt || echo "No .tf files changed"

      - name: Check if any Terraform files were changed
        id: check_files
        run: |
          if [ -s changed_files.txt ]; then
            echo "Files changed"
          else
            echo "No .tf files changed"
            exit 0
          fi

      - name: Run TFSec on Changed Files
        run: |
          while IFS= read -r file; do
            tfsec --format sarif --config-file $file >> tfsec.sarif
          done < changed_files.txt

      - name: Upload SARIF file
        uses: github/codeql-action/upload-sarif@v3
        with:
          sarif_file: tfsec.sarif
          category: tfsec

      - name: Upload TFSec SARIF as an artifact
        uses: actions/upload-artifact@v3
        with:
          name: tfsec-sarif
          path: tfsec.sarif

  sonarqube:
    name: "SONAR"
    runs-on: self-hosted
    needs: tflint
    
    steps:
      - name: Checkout Code
        uses: actions/checkout@v3

      - name: Run SonarQube Analysis
        env:
          SONAR_PROJECT_KEY: techFriday
          SONAR_HOST_URL: http://sonarqube:9000
          SONAR_TOKEN: ${{ secrets.SONARQUBE_TOKEN }}  # Use secrets for tokens
        run: |
          sonar-scanner \
            -Dsonar.projectKey=$SONAR_PROJECT_KEY \
            -Dsonar.host.url=$SONAR_HOST_URL \
            -Dsonar.token=$SONAR_TOKEN \
            -Dsonar.working.directory="/home/docker/.scannerwork"


  sonarqubeRepo:
    name: "GATHER ALL"
    runs-on: self-hosted
    needs: [tflint, checkov, tfsec, sonarqube]
    env:
      SONAR_PROJECT_KEY: techFriday
      SONAR_HOST_URL: http://sonarqube:9000
      SONAR_TOKEN: ${{ secrets.SONARQUBE_TOKEN }}
      
    steps:
      - name: Checkout Code
        uses: actions/checkout@v3

      # Download artifacts from other jobs
      - name: Download TFLint SARIF
        uses: actions/download-artifact@v3
        with:
          name: tflint-sarif
          path: .

      - name: Download Checkov SARIF
        uses: actions/download-artifact@v3
        with:
          name: prisma_policies-sarif
          path: .

      - name: Download TFSec SARIF
        uses: actions/download-artifact@v3
        with:
          name: tfsec-sarif
          path: .

      - name: Convert SARIF to SonarQube format
        run: |
          python3 sarifToSonar.py

      - name: Upload Issues to SonarQube
        env:
          SONAR_PROJECT_KEY: techFriday
          SONAR_HOST_URL: http://sonarqube:9000
          SONAR_TOKEN: ${{ secrets.SONARQUBE_TOKEN }}  # Use secrets for tokens
        run: |
          sonar-scanner \
            -Dsonar.projectKey=$SONAR_PROJECT_KEY \
            -Dsonar.host.url=$SONAR_HOST_URL \
            -Dsonar.token=$SONAR_TOKEN \
            -Dsonar.scm.disabled=true \
            -Dsonar.externalIssuesReportPaths=checkov-sonarqube.json